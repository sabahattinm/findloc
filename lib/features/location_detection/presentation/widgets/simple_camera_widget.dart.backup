import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:url_launcher/url_launcher.dart';

import '../bloc/location_detection_bloc.dart';

/// Basit ve kullanıcı dostu kamera widget'ı
class SimpleCameraWidget extends StatefulWidget {
  final VoidCallback? onNavigateToDetection;
  
  const SimpleCameraWidget({
    super.key,
    this.onNavigateToDetection,
  });

  @override
  State<SimpleCameraWidget> createState() => _SimpleCameraWidgetState();
}

class _SimpleCameraWidgetState extends State<SimpleCameraWidget> {
  @override
  void initState() {
    super.initState();
    // Widget yüklendiğinde son tespit edilen konumun kameralarını yükle
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _loadLastDetectedLocationCameras();
    });
  }

  void _loadLastDetectedLocationCameras() {
    final bloc = context.read<LocationDetectionBloc>();
    final currentState = bloc.state;
    
    if (currentState is LocationDetectionSuccess) {
      // Son tespit edilen konumun kameralarını yükle
      bloc.add(LoadNearbyCameras(
        location: currentState.location,
      ));
    }
  }

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<LocationDetectionBloc, LocationDetectionState>(
      builder: (context, state) {
        if (state is NearbyCamerasLoading) {
          return _buildLoadingState(context);
        } else if (state is NearbyCamerasLoaded) {
          if (state.cameras.isEmpty) {
            return _buildEmptyState(context);
          }
          return _buildCamerasList(context, state.cameras);
        }

        return _buildInitialState(context);
      },
    );
  }

  Widget _buildLoadingState(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            padding: EdgeInsets.all(24.w),
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
              shape: BoxShape.circle,
            ),
            child: CircularProgressIndicator(
              valueColor: AlwaysStoppedAnimation<Color>(
                Theme.of(context).colorScheme.primary,
              ),
              strokeWidth: 3.w,
            ),
          ),
          SizedBox(height: 24.h),
          Text(
            'Canlı Kameralar Aranıyor...',
            style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                  fontWeight: FontWeight.bold,
                  color: Theme.of(context).colorScheme.onSurface,
                ),
          ),
          SizedBox(height: 8.h),
          Text(
            'Yakındaki canlı kameralar bulunuyor',
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                  color:
                      Theme.of(context).colorScheme.onSurface.withOpacity(0.7),
                ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildEmptyState(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            padding: EdgeInsets.all(32.w),
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
              shape: BoxShape.circle,
            ),
            child: Icon(
              Icons.videocam_off,
              size: 64.w,
              color: Theme.of(context).colorScheme.primary,
            ),
          ),
          SizedBox(height: 24.h),
          Text(
            'Yakında Kamera Yok',
            style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                  fontWeight: FontWeight.bold,
                  color: Theme.of(context).colorScheme.onSurface,
                ),
          ),
          SizedBox(height: 8.h),
          Text(
            'Bu konumda canlı kamera bulunamadı.\nBaşka bir konum deneyin.',
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                  color:
                      Theme.of(context).colorScheme.onSurface.withOpacity(0.6),
                ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildInitialState(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            padding: EdgeInsets.all(32.w),
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
              shape: BoxShape.circle,
            ),
            child: Icon(
              Icons.camera_alt_rounded,
              size: 64.w,
              color: Theme.of(context).colorScheme.primary,
            ),
          ),
          SizedBox(height: 24.h),
          Text(
            'Konum Tespit Edin',
            style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                  fontWeight: FontWeight.bold,
                  color: Theme.of(context).colorScheme.onSurface,
                ),
          ),
          SizedBox(height: 8.h),
          Text(
            'Yakındaki canlı kameraları görmek için\nönce bir konum tespit edin',
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                  color:
                      Theme.of(context).colorScheme.onSurface.withOpacity(0.6),
                ),
            textAlign: TextAlign.center,
          ),
          SizedBox(height: 32.h),
          ElevatedButton.icon(
            onPressed: () {
              // Tespit Et sekmesine geç
              widget.onNavigateToDetection?.call();
            },
            icon: const Icon(Icons.camera_alt_rounded),
            label: const Text('Konum Tespit Et'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Theme.of(context).colorScheme.primary,
              foregroundColor: Colors.white,
              padding: EdgeInsets.symmetric(horizontal: 24.w, vertical: 12.h),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12.r),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSearchCamerasButton(BuildContext context) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 32.w),
      child: Column(
        children: [
          // Manuel arama butonu
          SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: () => _searchNearbyCameras(context),
              icon: Icon(
                Icons.search_rounded,
                size: 20.w,
              ),
              label: Text(
                'Yakındaki Kameraları Ara',
                style: TextStyle(
                  fontSize: 14.sp,
                  fontWeight: FontWeight.w600,
                ),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Theme.of(context).colorScheme.primary,
                foregroundColor: Colors.white,
                padding: EdgeInsets.symmetric(vertical: 16.h),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12.r),
                ),
                elevation: 2,
              ),
            ),
          ),
          SizedBox(height: 16.h),
          // Demo kameralar butonu
          SizedBox(
            width: double.infinity,
            child: OutlinedButton.icon(
              onPressed: () => _loadDemoCameras(context),
              icon: Icon(
                Icons.play_circle_outline_rounded,
                size: 20.w,
              ),
              label: Text(
                'Demo Kameraları Göster',
                style: TextStyle(
                  fontSize: 14.sp,
                  fontWeight: FontWeight.w600,
                ),
              ),
              style: OutlinedButton.styleFrom(
                foregroundColor: Theme.of(context).colorScheme.primary,
                side: BorderSide(
                  color: Theme.of(context).colorScheme.primary,
                  width: 1.5,
                ),
                padding: EdgeInsets.symmetric(vertical: 16.h),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12.r),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCamerasList(BuildContext context, cameras) {
    return Expanded(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
        // Başlık
        Padding(
          padding: EdgeInsets.all(16.w),
          child: Row(
            children: [
              Container(
                padding: EdgeInsets.all(8.w),
                decoration: BoxDecoration(
                  color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8.r),
                ),
                child: Icon(
                  Icons.videocam,
                  color: Theme.of(context).colorScheme.primary,
                  size: 20.w,
                ),
              ),
              SizedBox(width: 12.w),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Yakındaki Canlı Kameralar',
                      style: Theme.of(context).textTheme.titleLarge?.copyWith(
                            fontWeight: FontWeight.bold,
                          ),
                    ),
                    Text(
                      '${cameras.length} kamera bulundu',
                      style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                            color: Theme.of(context)
                                .colorScheme
                                .onSurface
                                .withOpacity(0.6),
                          ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),

        // Kamera listesi
        ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: cameras.length,
          itemBuilder: (context, index) {
            final camera = cameras[index];
            return _buildSimpleCameraCard(context, camera);
          },
        ),
      ],
    );
  }

  Widget _buildSimpleCameraCard(BuildContext context, camera) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 16.w, vertical: 8.h),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        borderRadius: BorderRadius.circular(16.r),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Kamera önizleme
          _buildCameraPreview(context, camera),

          // Kamera bilgileri
          Padding(
            padding: EdgeInsets.all(16.w),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Kamera adı ve türü
                Row(
                  children: [
                    Container(
                      padding: EdgeInsets.all(6.w),
                      decoration: BoxDecoration(
                        color: _getCameraTypeColor(camera.cameraType)
                            .withOpacity(0.1),
                        borderRadius: BorderRadius.circular(6.r),
                      ),
                      child: Text(
                        _getCameraTypeIcon(camera.cameraType),
                        style: TextStyle(fontSize: 16.sp),
                      ),
                    ),
                    SizedBox(width: 12.w),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            camera.name,
                            style: Theme.of(context)
                                .textTheme
                                .titleMedium
                                ?.copyWith(
                                  fontWeight: FontWeight.bold,
                                ),
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                          ),
                          Text(
                            _getCameraTypeDisplayName(camera.cameraType),
                            style:
                                Theme.of(context).textTheme.bodySmall?.copyWith(
                                      color: Theme.of(context)
                                          .colorScheme
                                          .onSurface
                                          .withOpacity(0.6),
                                    ),
                          ),
                        ],
                      ),
                    ),
                    // Durum göstergesi
                    Container(
                      padding:
                          EdgeInsets.symmetric(horizontal: 8.w, vertical: 4.h),
                      decoration: BoxDecoration(
                        color: camera.isActive
                            ? Colors.green.withOpacity(0.1)
                            : Colors.red.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(12.r),
                        border: Border.all(
                          color: camera.isActive ? Colors.green : Colors.red,
                          width: 1,
                        ),
                      ),
                      child: Text(
                        camera.isActive ? 'Canlı' : 'Offline',
                        style: TextStyle(
                          fontSize: 10.sp,
                          fontWeight: FontWeight.w500,
                          color: camera.isActive ? Colors.green : Colors.red,
                        ),
                      ),
                    ),
                  ],
                ),

                SizedBox(height: 12.h),

                // Konum bilgisi
                Row(
                  children: [
                    Icon(
                      Icons.location_on,
                      size: 16.w,
                      color: Theme.of(context)
                          .colorScheme
                          .onSurface
                          .withOpacity(0.6),
                    ),
                    SizedBox(width: 8.w),
                    Expanded(
                      child: Text(
                        '${camera.location.city ?? 'Bilinmeyen'}, ${camera.location.country ?? 'Bilinmeyen'}',
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                              color: Theme.of(context)
                                  .colorScheme
                                  .onSurface
                                  .withOpacity(0.7),
                            ),
                      ),
                    ),
                  ],
                ),

                SizedBox(height: 16.h),

                // Aksiyon butonları
                Row(
                  children: [
                    Expanded(
                      child: _buildActionButton(
                        context: context,
                        icon: Icons.play_arrow,
                        label: 'İzle',
                        color: Theme.of(context).colorScheme.primary,
                        onTap: () => _watchCamera(context, camera),
                      ),
                    ),
                    SizedBox(width: 12.w),
                    Expanded(
                      child: _buildActionButton(
                        context: context,
                        icon: Icons.map,
                        label: 'Haritada Gör',
                        color: Colors.blue,
                        onTap: () => _openInMaps(context, camera),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCameraPreview(BuildContext context, camera) {
    return Container(
      height: 120.h,
      width: double.infinity,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.only(
          topLeft: Radius.circular(16.r),
          topRight: Radius.circular(16.r),
        ),
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Theme.of(context).colorScheme.primary.withOpacity(0.1),
            Theme.of(context).colorScheme.secondary.withOpacity(0.1),
          ],
        ),
      ),
      child: Stack(
        children: [
          // Kamera önizleme placeholder
          Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Container(
                  padding: EdgeInsets.all(16.w),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.2),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    Icons.videocam,
                    size: 32.w,
                    color: Colors.white,
                  ),
                ),
                SizedBox(height: 8.h),
                Text(
                  'Canlı Kamera',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 14.sp,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          ),

          // Play butonu
          Positioned(
            bottom: 12.h,
            right: 12.w,
            child: Container(
              padding: EdgeInsets.all(8.w),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.6),
                shape: BoxShape.circle,
              ),
              child: Icon(
                Icons.play_arrow,
                color: Colors.white,
                size: 20.w,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildActionButton({
    required BuildContext context,
    required IconData icon,
    required String label,
    required Color color,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(12.r),
      child: Container(
        padding: EdgeInsets.symmetric(vertical: 12.h, horizontal: 16.w),
        decoration: BoxDecoration(
          color: color.withOpacity(0.1),
          borderRadius: BorderRadius.circular(12.r),
          border: Border.all(
            color: color.withOpacity(0.3),
            width: 1,
          ),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              icon,
              color: color,
              size: 18.w,
            ),
            SizedBox(width: 8.w),
            Text(
              label,
              style: TextStyle(
                color: color,
                fontSize: 12.sp,
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Kamera türü renkleri
  Color _getCameraTypeColor(cameraType) {
    switch (cameraType.toString()) {
      case 'CameraType.traffic':
        return Colors.orange;
      case 'CameraType.security':
        return Colors.red;
      case 'CameraType.weather':
        return Colors.blue;
      case 'CameraType.tourist':
        return Colors.green;
      case 'CameraType.construction':
        return Colors.brown;
      case 'CameraType.webcam':
        return Colors.purple;
      default:
        return Colors.grey;
    }
  }

  // Kamera türü ikonları
  String _getCameraTypeIcon(cameraType) {
    switch (cameraType.toString()) {
      case 'CameraType.traffic':
        return '🚦';
      case 'CameraType.security':
        return '🔒';
      case 'CameraType.weather':
        return '🌤️';
      case 'CameraType.tourist':
        return '📸';
      case 'CameraType.construction':
        return '🏗️';
      case 'CameraType.webcam':
        return '📹';
      default:
        return '📹';
    }
  }

  // Kamera türü display name
  String _getCameraTypeDisplayName(cameraType) {
    switch (cameraType.toString()) {
      case 'CameraType.traffic':
        return 'Trafik Kamerası';
      case 'CameraType.security':
        return 'Güvenlik Kamerası';
      case 'CameraType.weather':
        return 'Hava Durumu Kamerası';
      case 'CameraType.tourist':
        return 'Turist Kamerası';
      case 'CameraType.construction':
        return 'İnşaat Kamerası';
      case 'CameraType.webcam':
        return 'Web Kamerası';
      default:
        return 'Diğer';
    }
  }

  // Kamera izleme
  void _watchCamera(BuildContext context, camera) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(camera.name),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              height: 200.h,
              width: double.infinity,
              decoration: BoxDecoration(
                color: Colors.black,
                borderRadius: BorderRadius.circular(8.r),
              ),
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(
                      Icons.videocam,
                      color: Colors.white,
                      size: 48.w,
                    ),
                    SizedBox(height: 16.h),
                    Text(
                      'Kamera Yükleniyor...',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 16.sp,
                      ),
                    ),
                    SizedBox(height: 8.h),
                    Text(
                      'Bu özellik yakında aktif olacak',
                      style: TextStyle(
                        color: Colors.white70,
                        fontSize: 12.sp,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            SizedBox(height: 16.h),
            Text(
              'Canlı kamera izleme özelliği geliştiriliyor. Yakında kullanıma sunulacak!',
              style: Theme.of(context).textTheme.bodySmall,
              textAlign: TextAlign.center,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Kapat'),
          ),
        ],
      ),
    );
  }

  // Yakındaki kameraları arama
  void _searchNearbyCameras(BuildContext context) {
    // Konum izni iste ve kameraları ara
    context.read<LocationDetectionBloc>().add(
          const SearchNearbyCameras(),
        );
  }

  // Demo kameraları yükle
  void _loadDemoCameras(BuildContext context) {
    // Demo kameraları yükle
    context.read<LocationDetectionBloc>().add(
          const LoadDemoCameras(),
        );
  }

  // Haritada açma
  void _openInMaps(BuildContext context, camera) async {
    try {
      // Direkt Google Maps'e yönlendir - en basit yöntem
      final url = Uri.parse(
        'https://www.google.com/maps/search/?api=1&query=${camera.location.coordinates.latitude},${camera.location.coordinates.longitude}',
      );

      // Önce external application olarak dene
      if (await canLaunchUrl(url)) {
        await launchUrl(url, mode: LaunchMode.externalApplication);
      } else {
        // Eğer external açılamazsa, platform default olarak dene
        await launchUrl(url);
      }
    } catch (e) {
      // Hata durumunda koordinatları kopyala
      Clipboard.setData(ClipboardData(
        text:
            '${camera.location.coordinates.latitude}, ${camera.location.coordinates.longitude}',
      ));

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text(
              'Koordinatlar panoya kopyalandı. Google Maps\'e manuel olarak yapıştırabilirsiniz.'),
          backgroundColor: Colors.orange,
          duration: Duration(seconds: 3),
        ),
      );
    }
  }
}
